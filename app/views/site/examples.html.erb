
<div class="flex flex-col py-4 gap-y-4">
  <div class="font-semibold text-4xl">
    Cheat Sheet
  </div>
  
  <p>
    Look at the source of this page to get a sense for how each of the components shown below are implemented.
  </p>

  <div class="font-semibold text-2xl flex justify-between">
    Tooltips
    <div>
      <span class="rounded-full bg-blue-600 text-white text-xs px-2 py-1">
        tippy.js
      </span>
    </div>
  </div>

  <p>
    Tooltips are powered by tippy.js. Styling can be customised in tonic.css.
  </p>

  <div class="rounded shadow p-5" >
    <a class="inline cursor-pointer" data-tippy-content="<%= "Nice one"%>">
      Basic Tooltip
      <span class="font-xs">(Hover to show)</span>
    </a>
  </div>


  <div class="font-semibold text-2xl">
    Toasts
  </div>

  <p>
    These toasts use htmx to fetch content, tonic.css for default styling, and hyperscript for their animation behaviour. The .toasts-container can be found in the shared/partial_containers.html.erb partial.
  </p>

  <div class="rounded shadow p-5">
    <a class="cursor-pointer underline" hx-get="<%= toast_content_path %>" hx-target=".toasts-container" hx-swap="afterbegin" >Basic Toast (Click To Trigger) </a>
  </div>


<div class="flex flex-col py-4 gap-y-4">

  <div class="font-semibold text-xl">
    HTMX Examples
  </div>

  <p>
    Note: When fetching <span class="italic inline">parts</span> of a page (what htmx is used for), we don't need the server to return the full page html (including the head). So in our controller, we check if the incoming request was triggered by htmx, and if it was, we render it <span class="font-semibold">without</span> the layout. We've abstracted this pattern out into a simple method (support_partial_response) which is included in the ApplicationController and can be used as the last line of any controller actions to enable this behaviour.
  </p>

  <div class="rounded shadow p-5" >
    <a class="cursor-pointer underline" hx-get="<%= remote_content_path %>" hx-target="#remote-example-1">Remote Content (Click to load)</a>
    <div id="remote-example-1"></div>
  </div>

  <div class="rounded shadow p-5" >
    <div class="font-semibold"> 
      Deferred Content 
    </div>
    <div hx-get="<%= deferred_content_path %>" hx-trigger="load"></div>
  </div>

  <div class="rounded shadow p-5 gap-y-3 flex-col flex" >
    <div class="font-semibold"> 
      Fetch dynamic content when a dropdown changes
    </div>
    <select class="border-2 border-gray-100 font-sm p-3 rounded" name="list" hx-get="<%= dropdown_content_path %>" hx-target="#dropdown-example-1" hx-trigger="change" >
      <option value="">Select Option</option>
      <option value="fruits">Fruits</option>
      <option value="veg">Veg</option>
    </select>

    <div id="dropdown-example-1"></div>

  </div>  
</div>

<div class="flex flex-col space-y-5">

  <div class="font-semibold text-xl">
    Forms
  </div>

  <p class="mb-5">
    We have a pretty atypical approach to forms with rails, which is that we <span class="font-semibold">generally <span class="underline">don't</span> use rails form helpers</span> - gasp! ðŸ™€. This leads to frontend code which is a bit more verbose, but is also much easier to reason about and understand, (read: much more novice friendly).
  </p>

  

  <div class="rounded shadow p-5 flex flex-col gap-y-4" >
    <div class="font-semibold text-xl"> 
      Date Time Picker
    </div>
    <p>
      Our go-to date time picker implementation just uses the browser's default datetime picker with an onfocus event to show it. 
    </p>
    <form>
      <label for="datetime-picker" class="no-style font-semibold text-base">
        Pickup Time 
      </label>
      <input id="datetime-picker" type="datetime-local" onfocus="this.showPicker()" />
    </form>
  </div>

  <div class="rounded shadow p-5 flex flex-col gap-y-4" >
    <div class="font-semibold text-xl"> 
      Multi Select
    </div>
    <p>
      We're currently using choices.js for this but will be moving to a simpler implementation that uses minijs soon.
    </p>
    <form>
      <label for="multi-select"  class="no-style font-semibold text-base">
        Select Options
      </label>
      <select multiple class="js-choice" type="text" >
        <option value="One">One</option>
        <option value="Two">Two</option>
      </select>
    </form>
  </div>

  <div class="rounded shadow p-5 flex flex-col gap-y-4" >
    <div class="font-semibold text-xl"> 
      Remote form
    </div>
    <p>
      Use this pattern when you don't want to refresh the entire page to submit a form. The form below is extracted into a partial so that it can be reused.
    </p>
    <div id="plain-remote-form">
      <%= render partial: "partials/plain_remote_form" %>
    </div>
  </div>

  <div class="rounded shadow p-5 flex flex-col gap-y-4" >
    <div class="font-semibold text-xl"> 
      Remote form with errors and validations
    </div>
    <p>
      The previous form pattern demonstrates how to use remote forms, but it's rare you'll submit a form without persistence and validation. The example below does a few additional things: 1. It sets the default values of field inputs so they remain present after a form submit, 2. It uses the shared form errors partial to show errors, 3. It adds the invalid class to inputs with errors, and 4. It adds a success message on successful submission. We do most of this in plain old html (no form helpers).
    </p>
    
    <div id="remote-form">
      <%= render partial: "partials/remote_form" %>
    </div>
  </div>



</div>
